int printMenu()
{
	char* message1 = "Welcome to the";
	char* message2 = RED "IMAGINATION STATION\n" RESET;
	char* message3 = GREEN "1. USER MANUAL\n" RESET;
	char* message4 = BLUE "2. OPEN CANVAS\n" RESET;
	char* message5 = YELLOW "3. EXIT\n" RESET;
	char* message6 = "Please Enter Your Selection: ";
	int option = 0;
	printf("%100s %s", message1, message2);
	printf("%120s\n", message3);
	printf("%120s\n", message4);
	printf("%115s\n", message5);
	printf("%110s", message6);
	scanf("%d", &option);

	return option;
}

void printInstructions()
{
	printf("Welcome to IMAGINAITON STATION, your new FAVORITE command line art canvas!\n");
	printf("To draw on the canvas, you can move your cursor around, by using the W, A, S, and D keys.\n");
	printf("The inputs go as follows:\nW = Up\nA = Left\nS = Down\nD = Right\nQ = Exit\nP = Place\n");
	printf("Once you select a cell to color, you will be given a prompt to enter a color\n");
	printf("You also have the option to insert either a circle, square/rectangle, or triangle\n");
	printf("If selected, you will have be able to choose a center point, and dimensions of your shape\n");
	printf("After selecting the center and size, you will also be asked to choose a color\n");

	system("pause");
	system("cls");
}

void drawTriangle(Cell center, int height, int width, Marker currentMarker, Cell board[][75])
{
	int point1X = 0, point1Y = 0, point2X = 0, point2Y = 0, point3X = 0, point3Y = 0; //these represent three points of the triangle

	point1Y = center.X;
	point1X = center.Y + height / 2;

	point2Y = center.X - width / 2;
	point2X = center.Y - height / 2;

	point3Y = center.X + width / 2;
	point3X = center.Y - height / 2;

	drawLine(point1X, point1Y, point2X, point2Y, currentMarker, board);
	drawLine(point2X, point2Y, point3X, point3Y, currentMarker, board);
	drawLine(point3X, point3Y, point1X, point1Y, currentMarker, board);
}

void drawLine(int x0, int y0, int x1, int y1, char symbol, Cell board[][50])
{
	int dx = abs(x1 - x0);
	int dy = abs(y1 - y0); //absolute values of the change of x and y
	int sx = (x0 < x1) ? 1 : -1; //determines direction for x
	int sy = (y0 < y1) ? 1 : -1; //determines direction for y
	int err = dx - dy;
	
	while (1) //infinite loop, will be broken later in the loop
	{
		if (x0 >= 0 && x0 < 75 && y0 >= 0 && y0 < 50)
		{
			board[y0][x0].symbol = symbol;
		}
		if (x0 == x1 && y0 == y1)
		{
			break; //breaks loop because endpoint has been reached
		}
		int e2 = 2 * err; //Double error value
		
		if (e2 > -dy)  // Move in x direction if needed
		{ 
		err -= dy;
		x0 += sx; 
		}
		if (e2 < dx) // Move in y direction if needed
		{
			err += dx;
			y0 += sy;
		}
	}
}
//ADD ON TO PRINT CANVAS
	printf("W: Up A: Left S: Down D: Right Q: Quit P: Place");


void createLine(Cell board[][75], Cell cursor1, Cell cursor2, Marker currentMarker)
{
	int x1 = cursor1.Y;
	int y1 = cursor1.X;

	int x2 = cursor2.Y;
	int y2 = cursor2.X;

	drawLine(x1, y1, x2, y2, currentMarker, board);
}

//Addition this follows Y/N conditional asking about shape
else if (x == 'N' || x == 'n')
{
	printf("Would you like to add a line between two points? (Y/N) ");
	scanf(" %c", &x);
	if (x == 'Y' || x == 'y')
	{
		Cell point1 = move_around_canvas(board, &currentMarker, &arrow);
		Cell point2 = move_around_canvas(board, &currentMarker, &arrow);
		
		createLine(board, point1, point2, currentMarker);
	}
}

//FILE Processing
void parseFile(FILE* file, Cell board[][75])
{
	char line[50];
	char* token;

	while (fgets(line, sizeof(line), file) != NULL)
	{
		token = strtok(line, ",");
		int x = atoi(token);
		token = strtok(NULL, ",");
		int y = atoi(token);
		token = strtok(NULL, ",");
		char symbol = token[0];
		token = strtok(NULL, ",");
		int color = atoi(token);
		board[x][y].X = x;
		board[x][y].Y = y;
		board[x][y].symbol = symbol;
		board[x][y].color = color;
	}
}

void printToFile(FILE* file, Cell board[][75])
{
	for (int i = 0; i < 50; i++)
	{
		for (int j = 0; j < 75; j++)
		{
			fprintf(file, "%d,%d,%c,%d\n", board[i][j].X, board[i][j].Y, board[i][j].symbol, board[i][j].color);
		}
	}
}


//Addition to getArrowInput to account for new inputs
int get_arrow_input()
{
	//printf("Press an WASD key to move and P to place (use Q to exit):\n");
	//initilize input
	char input = '\0';

	//Get and verify user input
	do{
		input = _getch();
	} while (input != 'w' && input != 'W' && input != 'a' && input != 'A' && input != 's' && input != 'S' && input != 'd' && input != 'D' && input != 'Q' && input != 'q' && input != 'P' && input != 'p' && input != 'm' && input != 'M' && input != 'l' && input != 'L' && input != 'u' && input != 'U');
	
	//return a direction int
	if (input == 'Q' || input == 'q') {
		return 0;
	}
	else if (input == 'w' || input == 'W') {
		return 1;
	}
	else if (input == 's' || input == 'S') {
		return 2;
	}
	else if (input == 'd' || input == 'D') {
		return 3;
	}
	else if (input == 'a' || input == 'A') {
		return 4;
	}
	else if (input == 'p' || input == 'P') {
		return 5;
	}
	else if (input == 'm' || input == 'M') {
		return 6;
	}
	else if (input == 'l' || input == 'L') {
		return 7;
	}
	else if (input == 'u' || input == 'U') {
		return 8;
	}
}

//Update to displayCanvas to account for new inputs
printf("W: Up A: Left S: Down D: Right Q: Quit P: Place M: Marker L: Load Canvas U: Upload Canvas\n");

//Updated function for moveAroundCanvas
Cell move_around_canvas(Cell canvas[][75], Marker *currentMarker, int *arrow) {
	
	char* temp = '\0';
	Cell cursor = { 0,0,'+' };
	do {
		temp = canvas[cursor.X][cursor.Y].symbol;
		canvas[cursor.X][cursor.Y].symbol = '+';
		print_board(canvas);
		canvas[cursor.X][cursor.Y].symbol = temp;
		*arrow = get_arrow_input();
		if (*arrow == 1) {
			cursor.X--;
		}
		else if (*arrow == 2) {
			cursor.X++;
		}
		else if (*arrow == 3) {
			cursor.Y++;
		}
		else if (*arrow == 4) {
			cursor.Y--;
		}
		else if (*arrow == 6)
		{
			*currentMarker = setMarker();
		}
		else if (*arrow == 7)
		{
			FILE* inputStream = fopen("canvasData.csv", "r");
			parseFile(inputStream, canvas);
			fclose(inputStream);
		}
		else if (*arrow == 8)
		{
			FILE* outputStream = fopen("canvasData.csv", "w");
			printToFile(outputStream, canvas);
			fclose(outputStream);
		}
		system("cls");
		if (cursor.X < 0) {
			cursor.X = 0;
		}
		if (cursor.X > 49){
			cursor.X = 49;
		}
		if(cursor.Y < 0) {
			cursor.Y = 0;
		}
		if (cursor.Y > 74){
			cursor.Y = 74;
		}
	} while (*arrow != 0 && *arrow != 5);

	return cursor;

}
	printf("Color List: 1. Red 2. Yellow 3. Green 4. Blue 5. Light Blue 6. Purple 7. Black 8. White 9. Default\n");

